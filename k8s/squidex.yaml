apiVersion: v1
kind: Namespace
metadata:
  name: squidex
  annotations:
    iam.amazonaws.com/permitted: ".*"
---
apiVersion: 'kubernetes-client.io/v1'
kind: ExternalSecret
metadata:
  name: squidex
  namespace: squidex
spec:
  backendType: secretsManager
  data:
    - key: ${SQUIDEX_SECRET}
      name: mongo_connection_string
      property: mongo_connection_string
    - key: ${SQUIDEX_SECRET}
      name: squidex_admin_password
      property: squidex_admin_password
    - key: ${SQUIDEX_SECRET}
      name: google_auth_client_id
      property: google_auth_client_id
    - key: ${SQUIDEX_SECRET}
      name: google_auth_secret
      property: google_auth_secret
    - key: squidex-user
      name: iam_access_key
      property: iam_access_key
    - key: squidex-user
      name: iam_secret_key
      property: iam_secret_key
    - key: squidex-user
      name: email_smtp_password
      property: email_smtp_password
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: squidex-v2
  namespace: squidex
spec:
  replicas: ${SQUIDEX_REPLICAS}
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: squidex-v2
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: squidex-v2
    spec:
      containers:
        - name: squidex
          image: squidex/squidex:${SQUIDEX_VERSION_TAG}
          imagePullPolicy: Always
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "768Mi"
              cpu: "500m"
          readinessProbe:
            httpGet:
              path: /readiness
              port: 80
              scheme: HTTP
          livenessProbe:
            httpGet:
              path: /healthz
              port: 80
              scheme: HTTP
            initialDelaySeconds: 360
          ports:
            - containerPort: 80
          env:
            # The following can be set to create an admin user
            - name: IDENTITY__ADMINRECREATE
              value: "true"
            - name: IDENTITY__ADMINEMAIL
              value: "${SQUIDEX_ADMINEMAL}"
            - name: IDENTITY__ADMINPASSWORD
              valueFrom:
                secretKeyRef:
                  name: squidex
                  key: squidex_admin_password
            - name: URLS__BASEURL
              value: "https://${SQUIDEX_DOMAIN_NAME}"
            - name: URLS__ENFORCEHTTPS
              value: "false"
            - name: HEALTHZ__GC__THRESHOLD
              value: "8192"
            - name: ASSETS__MAXSIZE
              value: "52428800"
            - name: LOGGING__HUMAN
              value: "false"
            - name: ORLEANS__CLUSTERING
              value: "MongoDB"
            - name: EVENTSTORE__MONGODB__CONFIGURATION
              valueFrom:
                secretKeyRef:
                  name: squidex
                  key: mongo_connection_string
            - name: EVENTSTORE__MONGODB__DATABASE
              value: "Squidex"
            - name: STORE__MONGODB__CONFIGURATION
              valueFrom:
                secretKeyRef:
                  name: squidex
                  key: mongo_connection_string
            - name: STORE__MONGODB__DATABASE
              value: "Squidex"
            - name: STORE__MONGODB__CONTENTDATABASE
              value: "SquidexContentV2"
            - name: ASSETSTORE__TYPE
              value: "AmazonS3"
            - name: ASSETSTORE__AMAZONS3__BUCKET
              value: "${SQUIDEX_ASSET_BUCKET}"
            - name: ASSETSTORE__AMAZONS3__REGIONNAME
              value: "${AWS_DEFAULT_REGION}"
            - name: ASSETSTORE__AMAZONS3__ACCESSKEY
              valueFrom:
                secretKeyRef:
                  name: squidex
                  key: iam_access_key
            - name: ASSETSTORE__AMAZONS3__SECRETKEY
              valueFrom:
                secretKeyRef:
                  name: squidex
                  key: iam_secret_key
            - name: IDENTITY__GOOGLECLIENT
              value: "${SQUIDEX_FASTLY_BETA_GOOGLE_CLIENT}"
              valueFrom:
                secretKeyRef:
                  name: squidex
                  key: google_auth_client_id
            - name: IDENTITY__GOOGLESECRET
              value: "${SQUIDEX_FASTLY_BETA_GOOGLE_SECRET}"
              valueFrom:
                secretKeyRef:
                  name: squidex
                  key: google_auth_secret
            # Specifically Blanking out to deactive these options
            - name: IDENTITY__GITHUBCLIENT
              value: ""
            - name: IDENTITY__GITHUBCLIENT
              value: ""
            - name: IDENTITY__MICROSOFTCLIENT
              value: ""
            - name: IDENTITY__MICROSOFTCLIENT
              value: ""

            # - name: CACHING__MAXSURROGATEKEYSSIZE
            #   value: "0"
            - name: LOGGING__DATADOG
              value: "true"
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: EMAIL__SMTP__SERVER
              value: "email-smtp.us-east-1.amazonaws.com"
            - name: EMAIL__SMTP__SENDER
              value: "squidex@learnwithhomer.com"
            - name: EMAIL__SMTP__USERNAME
              value: AKIAYWLMFLI6YQPOC56T
            - name: EMAIL__SMTP__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: squidex
                  key: email_smtp_password
            - name: EMAIL__SMTP__ENABLESSL
              value: "true"
            - name: EMAIL__SMTP__PORT
              value: "587"
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: squidex
  namespace: squidex
  labels:
    name: squidex
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: squidex-v2
  type: NodePort
---
---
kind: Ingress
apiVersion: networking.k8s.io/v1beta1
metadata:
  namespace: squidex
  name: squidex
  annotations:
    # use the shared ingress-nginx
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "200m"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, OPTIONS, DELETE"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,X-LANG,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,X-Api-Key,X-Device-Id,Access-Control-Allow-Origin"
spec:
  rules:
    - host: ${SQUIDEX_DOMAIN_NAME}
      http:
        paths:
        - path: /
          backend:
            serviceName: squidex
            servicePort: 80
